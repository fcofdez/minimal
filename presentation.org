#+TITLE: Knowing your Garbage Collector
#+AUTHOR: Francisco Fernández Castaño
#+EMAIL: francisco.fernandez.castano@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

#+WWW: http://fcofdez.github.io
#+GITHUB: http://github.com/fcofdez
#+TWITTER: fcofdezc


** Agenda

- Introduction
  * Motivation
  * Known problems
  * Definitions
  * Garbage collection trade-offs
- CPython implementation - Reference Counting
  * Basic objects
  * Reference Counting algorithm
  * Cycles detector
- PyPy approach
  * Description
  * Incminmark

* Introduction
** Motivation
*** Usual python usage
[[file:./assets/images/business]]
#+BEGIN_HTML
<img src="./assets/images/business" style="margin: 0 30%; height: 200px">
#+END_HTML

** Known problems   
- Dealing manually with memory is hard
- Memory leaks
- Ownership
#+BEGIN_SRC c
int * func ( void )
{
   int * num = malloc (10 * sizeof ( int ));;
   /* ... */
   return num ;
}
#+END_SRC
- Dangling Pointers
#+BEGIN_SRC c
int * func ( void )
{
int num = 1234;
/* ... */
return &num;
}
#+END_SRC
*** Some solutions
- C++
  * [[https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization][RAII]]
  * [[http://en.cppreference.com/w/cpp/memory/unique_ptr][uniqueptr]]
  * [[http://en.cppreference.com/w/cpp/memory/shared_ptr][sharedptr]]
- Rust 
*** Scenarios where manual memory management is mandatory
- Embedded systems
- Performance constrained applications
- Applications that need determinism
** What is garbage collection?
